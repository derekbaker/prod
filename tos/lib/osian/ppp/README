This directory contains an implementation of the Point-to-Point Protocol
(RFC 1661) in TinyOS.  It is suitable for sharing the serial port among
multiple packet-oriented communications paths.  The goal is a system that
allows a TinyOS application that is connected to a PC using a serial port to
talk directly to a vendor-supplied PPP daemon and provide the standard IPCP
or IPV6CP protocols to forward network packets to a wireless sensor network
without any need to install support software on the PC.

The architecture permits protocols to be independently developed and wired
in, in classic TinyOS fashion.  Similarly, protocol options may be included
or excluded, and for LCP-style protocols that use messages with codes,
lengths, and data fields the set of recognized codes is determined by
wiring.

In its current form, the PppDaemonC component will successfully negotiate an
open connection with the Linux PPP daemon.  By linking in the PppIpv6C
component, and connecting its PppIpv6 interface to a component that supports
some sort of IPv6 API, you can communicate with TinyOS applications over
IPv6.  The tests/Ipv6 example shows the basic configuration required.

Currently there is no IPv4 (RFC1332) module.

========================================

Many of the tests require use of the PPP4Py package, which provides
Point-to-Point Protocol support for Python.  Get a copy at:

  git://ppp4py.git.sourceforge.net/gitroot/ppp4py/ppp4py

Remember to add it to your PYTHONPATH:

PPP4PY_ROOT=${PPP4PY_ROOT:-/home/pab/ppp4py/dev}
PYTHONPATH=${PPP4PY_ROOT}:${PYTHONPATH:+:${PYTHONPATH}}
PATH="${PPP4PY_ROOT}/scripts:${PPP4PY_ROOT}/bin:${PATH}"
export PPP4PY_ROOT PYTHONPATH PATH

Most tests have a test.sh script that builds the application, installs it on
the default board, and runs the ppp4py test program.  Trusted tests, in
order of complexity, are:

  HdlcFraming -- a unit test for HdlcFramingC
  HdlcRead -- verifies the application correctly decodes HDLC frames
  HdlcEcho -- verifies HDLC transmission of received frames
  HdlcSpeed -- round-trip full(half) duplex performance tests
  Lcp -- Basic Link-Control-Protocol negotiation
  Ipv6 -- Basic IPV6CP on top of LCP

