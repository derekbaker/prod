/* Copyright (c) 2010 People Power Co.
 * All rights reserved.
 *
 * This open source code was developed with funding from People Power Company
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the
 *   distribution.
 * - Neither the name of the People Power Corporation nor the names of
 *   its contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
 * PEOPLE POWER CO. OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE
 *
 */

/** Create a socket to be used for Internet Protocol communications.
 *
 * OSIAN does not support dynamic socket creation; rather, socket
 * instances are created at build time by instantiating IpSocketC with
 * the parameters normally passed to socket(2).
 *
 * @note Domain is not the same as address family.  Addresses in
 * multiple families may be bound to a socket; e.g. an IPV6-domain
 * socket (identified using AF_INET6) may be used with both AF_INET6
 * (standard IPv6) or AF_LOWPAN_IPHC (compressed) addresses.
 *
 * @param domain Always AF_INET6 (until it isn't...)
 *
 * @param type Either SOCK_DGRAM or SOCK_RAW (until SOCK_STREAM...).
 * Really, this would normally be used to determine a default
 * protocol, but since we don't do that (see below) it's redundant
 * with protocol.
 *
 * @param protocol Generally IPPROTO_foo.  Packets will only be
 * delivered to the socket if they are of the corresponding protocol.
 * Packets generated by the socket will use this protocol.  Unlike the
 * POSIX socket function call, it is unwise to use a value of 0 to
 * denote a "default", since determining a default protocol at build
 * time is deemed "messy".  Use of IPPROTO_RAW will convert this to a
 * SOCK_RAW socket: transport-layer headers will not be stripped
 * before delivery through the socket API.  IPPROTO_RAW will also
 * bypass checksum calculation and require use of the IpSocketMsg
 * interface to send packets, as the real IP protocol must be passed
 * in an associated sk_buff structure.
 */
#include <net/socket.h>
generic configuration IpSocketC (uint8_t domain,
                                 uint8_t type,
                                 uint8_t protocol) {
  provides {
    interface IpSocket;
    interface IpSocketMsg;
    interface IpDatagramSocket;
    interface IpConnectedSocket;
  }
} implementation {
  enum {
    SocketId = unique(UQ_OIP_SOCKET),
  };

  components new IpSocketP(SocketId, domain, type, protocol);

  components IpSocketsC;
  IpSocketsC.IpSocket_[SocketId] -> IpSocketP;

  IpSocket = IpSocketsC.IpSocket[SocketId];
  IpSocketMsg = IpSocketsC.IpSocketMsg[SocketId];
  IpDatagramSocket = IpSocketsC.IpDatagramSocket[SocketId];
  IpConnectedSocket = IpSocketsC.IpConnectedSocket[SocketId];
}
  
